library com.livecode.extensions.devore.nscursor

  use com.livecode.foreign
  use com.livecode.objc

  metadata title is "NSCursor"
  metadata author is "Trevor DeVore"
  metadata version is "0.1.0"

  private foreign handler ObjC_NSCursorAlloc() returns ObjcRetainedId binds to "objc:NSCursor.+alloc"
  private foreign handler ObjC_NSCursorCurrentCursor() returns ObjcId binds to "objc:NSCursor.+currentCursor"
  private foreign handler ObjC_NSCursorCurrentSystemCursor() returns ObjcId binds to "objc:NSCursor.+currentSystemCursor"
  private foreign handler ObjC_NSCursorArrowCursor() returns ObjcId binds to "objc:NSCursor.+arrowCursor"

  /**
  Summary:

  Parameters:
  pFilename:

  Returns:
  */
  private handler _GetCursorTypes() returns Array
    return {"current system": 0, \
            "current": 1, \
            "arrow": 2, \
            "closed hand": 3, \
            "contextual menu": 4, \
            "crosshair": 5, \
            "disappearing item": 6, \
            "drag copy": 7, \
            "drag link": 8, \
            "I beam": 9, \
            "vertical I beam": 10, \
            "open hand": 11, \
            "not allowed": 12, \
            "pointing hand": 13, \
            "resize down": 14, \
            "resize left": 15, \
            "resize left-right": 16, \
            "resize up": 17, \
            "resize up-down": 18 \
            }
  end handler


  private handler _CursorForType(in pCursorType as Integer) returns ObjcObject
    variable tCursor as ObjcObject
    variable tTypes as Array

    unsafe
      if pCursorType is 0 then
        put ObjC_NSCursorCurrentSystemCursor() into tCursor
      else if pCursorType is 1 then
        put ObjC_NSCursorCurrentCursor() into tCursor
      end if
    end unsafe

    return tCursor
  end handler


  public handler NSCursorGet(in pCursorType as String) returns Array
    variable tCursorTypes as Array
    variable tType as String
    variable tCursorType as Integer
    variable tCursor as ObjcObject
    variable tCursorA as Array

    // Lookup cursor type id
    put _GetCursorTypes() into tCursorTypes
    repeat for each key tType in tCursorTypes
      if tType is pCursorType then
        put tCursorTypes[tType] into tCursorType
      end if
    end repeat

    put _CursorForType(tCursorType) into tCursor

    // Get cursor image

    // Get cursor hotspot

    // Get cursor width/height

    return tCursorA
  end handler

    /*

    NSDictionary * scapGetCursor(int pRepresentation, int pCursorType)
    {
        NSMutableDictionary * t_return = nil;
        t_return = [NSMutableDictionary dictionary];

        NSCursor * t_cursor = nil;
        t_cursor = cursorForCursorType(pCursorType);

        NSImage * t_cursor_image = nil;
        t_cursor_image = [t_cursor image];

        NSImageRep * t_image_rep = [[t_cursor_image representations] objectAtIndex:pRepresentation-1];

        CGImageRef t_cgRef = [t_image_rep CGImageForProposedRect:NULL
                                                 context:nil
                                                   hints:nil];
        NSBitmapImageRep *t_bitmap = [[NSBitmapImageRep alloc] initWithCGImage:t_cgRef];

        [t_return setObject:[t_bitmap representationUsingType:NSPNGFileType properties:nil] forKey:@"image"];

        NSPoint t_hotspot = [t_cursor hotSpot];
        [t_return setObject:[NSString stringWithFormat:@"%d,%d",(int)t_hotspot.x,(int)t_hotspot.y] forKey:@"hotspot"];

        NSSize t_size = t_cursor_image.size;
        [t_return setObject:[NSString stringWithFormat:@"%d",(int)t_size.width] forKey:@"width"];
        [t_return setObject:[NSString stringWithFormat:@"%d",(int)t_size.height] forKey:@"height"];

        return t_return;
    }
    */
end library
