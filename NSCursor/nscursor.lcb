library com.livecode.extensions.devore.nscursor

  use com.livecode.foreign
  use com.livecode.objc

  metadata title is "NSCursor"
  metadata author is "Trevor DeVore"
  metadata version is "0.1.0"

  public foreign type CGImageRef binds to "MCAggregateTypeInfo:r"
  public foreign type NSPoint binds to "MCAggregateTypeInfo:NN"
  public foreign type NSSize binds to "MCAggregateTypeInfo:NN"

  private foreign handler ObjC_NSCursorAlloc() returns ObjcRetainedId binds to "objc:NSCursor.+alloc"
  private foreign handler ObjC_NSCursorCurrentCursor() returns ObjcId binds to "objc:NSCursor.+currentCursor"
  private foreign handler ObjC_NSCursorCurrentSystemCursor() returns ObjcId binds to "objc:NSCursor.+currentSystemCursor"
  private foreign handler ObjC_NSCursorArrowCursor() returns ObjcId binds to "objc:NSCursor.+arrowCursor"
  private foreign handler ObjC_NSCursorImage(in pCursor as ObjcId) returns ObjcId binds to "objc:NSCursor.-image"
  private foreign handler ObjC_NSCursorHotspot(in pCursor as ObjcId) \
        returns NSPoint \
        binds to "objc:NSCursor.-hotSpot"

  private foreign handler ObjC_NSImageRepresentations(in pImage as ObjcId) returns ObjcId binds to "objc:NSImage.-representations"
  private foreign handler ObjC_NSImageSize(in pImage as ObjcId) \
        returns NSSize \
        binds to "objc:NSImage.-size"

  private foreign handler ObjC_NSImageRepGetCGImage(in pImageRep as ObjcId, in pContext as optional ObjcId, in pHints as optional ObjcId) \
        returns CGImageRef \
        binds to "objc:NSImageRep.-CGImageForProposedRect:context:hints:"

  private foreign handler ObjC_NSBitmapImageRepAlloc() returns ObjcRetainedId binds to "objc:NSBitmapImageRep.+alloc"
  private foreign handler ObjC_NSBitmapImageRepInitWithCGImage(in pImageRep as ObjcId, in pCGImageRef as CGImageRef) \
        returns ObjcId \
        binds to "objc:NSBitmapImageRep.-initWithCGImage:"
  private foreign handler ObjC_NSBitmapImageRepRepresenatationUsingType(in pBitmapImageRep as ObjcId, in pType as CInt, in pProps as optional ObjcId) \
        returns ObjcId \
        binds to "objc:NSBitmapImageRep.-representationUsingType:properties:"

  /**
  Summary:

  Parameters:
  pFilename:

  Returns:
  */
  private handler _GetCursorTypes() returns Array
    return {"current system": 0, \
            "current": 1, \
            "arrow": 2, \
            "closed hand": 3, \
            "contextual menu": 4, \
            "crosshair": 5, \
            "disappearing item": 6, \
            "drag copy": 7, \
            "drag link": 8, \
            "I beam": 9, \
            "vertical I beam": 10, \
            "open hand": 11, \
            "not allowed": 12, \
            "pointing hand": 13, \
            "resize down": 14, \
            "resize left": 15, \
            "resize left-right": 16, \
            "resize up": 17, \
            "resize up-down": 18 \
            }
  end handler


  private handler _CursorForType(in pCursorType as Integer) returns ObjcObject
    variable tCursor as ObjcObject
    variable tTypes as Array

    unsafe
      if pCursorType is 0 then
        put ObjC_NSCursorCurrentSystemCursor() into tCursor
      else if pCursorType is 1 then
        put ObjC_NSCursorCurrentCursor() into tCursor
      end if
    end unsafe

    return tCursor
  end handler


  public handler NSCursorGetCurrentCursor() returns Array
    variable tCursor as ObjcObject
    variable tImage as ObjcObject
    variable tImageReps as ObjcObject
    variable tImageRepsList as List
    variable tImageRep as ObjcObject
    variable tBitmapImageRep as ObjcObject
    variable tCGImageRef as CGImageRef
    variable tImageData as ObjcObject
    variable tCursorInfo as Array

    variable tSize as NSSize
    variable tHotspot as optional NSPoint
    variable tX as String
    variable tY as String

    unsafe
      put ObjC_NSCursorCurrentCursor() into tCursor

      put ObjC_NSCursorHotspot(tCursor) into tHotspot
      format element 1 of tHotspot as string into tX
      format element 2 of tHotspot as string into tY
      put tX & "," & tY into tCursorInfo["hotspot"]

      put ObjC_NSCursorImage(tCursor) into tImage
      put ObjC_NSImageSize(tImage) into tSize
      format element 1 of tSize as string into tX
      format element 2 of tSize as string into tY
      put tX into tCursorInfo["width"]
      put tY into tCursorInfo["height"]

      put ObjC_NSImageRepresentations(tImage) into tImageReps
      put ListFromNSArray(tImageReps) into tImageRepsList
      put element 1 of tImageRepsList into tImageRep

      put ObjC_NSImageRepGetCGImage(tImageRep, nothing, nothing) into tCGImageRef

      put ObjC_NSBitmapImageRepAlloc() into tBitmapImageRep
      put ObjC_NSBitmapImageRepInitWithCGImage(tBitmapImageRep, tCGImageRef) into tBitmapImageRep

      -- TIFF = 0
      -- BMP = 1
      -- GIF = 2
      -- JPEG = 3
      -- PNG = 4
      -- JPEG2000 = 5
      put ObjC_NSBitmapImageRepRepresenatationUsingType(tBitmapImageRep, 4, nothing) into tImageData
      put DataFromNSData(tImageData) into tCursorInfo["image"]
    end unsafe

    return tCursorInfo
  end handler


  public handler NSCursorGet(in pCursorType as String) returns Array
    variable tCursorTypes as Array
    variable tType as String
    variable tCursorType as Integer
    variable tCursor as ObjcObject
    variable tCursorA as Array

    // Lookup cursor type id
    put _GetCursorTypes() into tCursorTypes
    repeat for each key tType in tCursorTypes
      if tType is pCursorType then
        put tCursorTypes[tType] into tCursorType
      end if
    end repeat

    put _CursorForType(tCursorType) into tCursor

    // Get cursor image

    // Get cursor hotspot

    // Get cursor width/height

    return tCursorA
  end handler
end library
