library com.livecode.extensions.trevordevore.nsevent

  use com.livecode.foreign
  use com.livecode.objc
  use com.livecode.engine

  metadata title is "NSEvent"
  metadata author is "Trevor DeVore"
  metadata version is "0.1.0"

  /* BLOCK HANDLING */

  type LibraryHandle is Pointer

  private variable mNSConcreteGlobalBlock as optional Pointer

  constant kRTLD_LAZY    is 1
  private foreign handler OpenLibrary(in pPath as ZStringUTF8, in pFlag as CSInt) returns optional LibraryHandle binds to "dlopen"
  private foreign handler GetSymbolPointer(in pHandle as LibraryHandle, in pSymbol as ZStringUTF8) returns optional Pointer binds to "dlsym"
  private foreign handler CloseLibrary(in pHandle as LibraryHandle) returns CSInt binds to "dlclose"

  private unsafe handler EnsureNSConcreteGlobalBlock() returns nothing
    if mNSConcreteGlobalBlock is not nothing then
      return
    end if

    variable tSystem as LibraryHandle
    put OpenLibrary("libSystem.dylib", kRTLD_LAZY) into tSystem
    if tSystem is not nothing then
      put GetSymbolPointer(tSystem, "_NSConcreteGlobalBlock") into mNSConcreteGlobalBlock
      CloseLibrary(tSystem)
    end if
  end handler

  public foreign type BlockDescriptor binds to "MCAggregateTypeInfo:ffrrr"
  public foreign type Block binds to "MCAggregateTypeInfo:rEErr"
  type BlockPointer is Pointer

  foreign handler MCHandlerGetFunctionPtr(in pHandler as any, out rPtr as Pointer) returns CBool binds to "<builtin>"

  private foreign handler CopyBlockDescriptor(inout pBlock as BlockDescriptor, in pSize as UIntSize, out rNewBlock as Pointer) returns CBool binds to "MCMemoryAllocateCopy"

  private foreign handler CopyBlock(inout pBlock as Block, in pSize as UIntSize, out rNewBlock as Pointer) returns CBool binds to "MCMemoryAllocateCopy"

  private foreign handler MCMemoryDelete(in pBlock as Pointer) returns nothing binds to "<builtin>"

  private constant kBlockSize is 32
  private constant kBlockDescriptorSize is 40

  private handler CreateBlockPointerFromHandler(in pHandler as any, out rBlockPtr as optional BlockPointer) returns Boolean
    unsafe
      EnsureNSConcreteGlobalBlock()

      variable tFunctionPtr as Pointer
      if not MCHandlerGetFunctionPtr(pHandler, tFunctionPtr) then
        return false
      end if

      variable tBlock as Block
      variable tBlockDescriptor as BlockDescriptor

      put [0, kBlockSize, nothing, nothing, nothing] into tBlockDescriptor

      variable tBlockDescriptorPointer as Pointer
      if not CopyBlockDescriptor(tBlockDescriptor, kBlockDescriptorSize, tBlockDescriptorPointer) then
        return false
      end if

      put [mNSConcreteGlobalBlock, 0x30000000, 0, tFunctionPtr, tBlockDescriptorPointer] into tBlock

      variable tBlockPtr as BlockPointer
      if not CopyBlock(tBlock, kBlockSize, tBlockPtr) then
        MCMemoryDelete(tBlockDescriptorPointer)
        return false
      end if

      put tBlockPtr into rBlockPtr
      return true
    end unsafe
  end handler

  private handler DeleteBlockPointer(in pBlockPointer as BlockPointer)
    unsafe
      DeleteBlockDescriptorPointer(pBlockPointer)
      MCMemoryDelete(pBlockPointer)
    end unsafe
  end handler

  private unsafe handler DeleteBlockDescriptorPointer(inout pBlock as Block)
    MCMemoryDelete(pBlock[5])
  end handler

  /* END BLOCK HANDLING */

  variable mNSEventHandlerTypeBlock as optional BlockPointer
  variable mNSEventMonitor as optional ObjcId
  public foreign type NSPoint binds to "MCAggregateTypeInfo:qq"

  private foreign handler ObjC_NSEventAddGlobalMonitorForEventsMatchingMask (in pNSEventMask as CULongLong, in pHandler as BlockPointer) \
        returns ObjcId \
        binds to "objc:NSEvent.+addGlobalMonitorForEventsMatchingMask:handler:"
  private foreign handler ObjC_NSEventRemoveMonitor (in pEventHandlerObject as ObjcId) \
        returns nothing \
        binds to "objc:NSEvent.+removeMonitor:"

  private foreign handler ObjC_NSEventWindow (in pEvent as ObjcId) \
        returns optional ObjcId \
        binds to "objc:NSEvent.-window"

  -- private foreign handler ObjC_NSEventMouseLocation (in pEvent as ObjcId) \
  --       returns NSPoint \
  --       binds to "objc:NSEvent.-mouseLocation"

  private foreign handler ObjC_NSEventButtonNumber (in pEvent as ObjcId) \
        returns CLong \
        binds to "objc:NSEvent.-buttonNumber"

  private foreign handler ObjC_NSEventLocationInWindow (in pEvent as ObjcId) \
        returns NSPoint \
        binds to "objc:NSEvent.-locationInWindow"

  private foreign handler ObjC_NSEventType (in pEvent as ObjcId) \
        returns CULongLong \
        binds to "objc:NSEvent.-type"

  private foreign handler ObjC_NSEventTimestamp (in pEvent as ObjcId) \
        returns CDouble \
        binds to "objc:NSEvent.-timestamp"


  /**
  Summary: Create the necessary block pointer

  Returns: nothing
  */
  public handler NSEventInitialize() returns Boolean
    variable tResult as Boolean

    if mNSEventHandlerTypeBlock is nothing then
      unsafe
        put CreateBlockPointerFromHandler(NSEventGlobalMonitorCallback, mNSEventHandlerTypeBlock) into tResult
      end unsafe
    else
      put true into tResult
    end if

    return tResult
  end handler


  public handler NSEventCleanup() returns nothing
    removeGlobalMonitor()

    if mNSEventHandlerTypeBlock is not nothing then
      unsafe
        DeleteBlockPointer(mNSEventHandlerTypeBlock)
      end unsafe
      put nothing into mNSEventHandlerTypeBlock
    end if
  end handler


  /**
  Summary:

  Parameters:
  pFilename:

  Description:


  Returns:
  */
  public handler NSEventAddGlobalMonitorForEventsMatchingMask(in pEventMask as String) returns nothing
    variable tEventMask as Number
    variable tFunctionPtr as Pointer

    put _GetEventMask(pEventMask) into tEventMask

    if mNSEventMonitor is nothing then
      unsafe
        put ObjC_NSEventAddGlobalMonitorForEventsMatchingMask(tEventMask, mNSEventHandlerTypeBlock) into mNSEventMonitor
      end unsafe
    end if
  end handler


  /**
  Summary: Summary

  Returns: nothing
  */
  public handler NSEventRemoveGlobalMonitor() returns nothing
    removeGlobalMonitor()
  end handler


  private handler removeGlobalMonitor() returns nothing
    if mNSEventMonitor is not nothing then
      unsafe
        ObjC_NSEventRemoveMonitor(mNSEventMonitor)
        put nothing into mNSEventMonitor
      end unsafe
    end if
  end handler


  /**
  Summary: NSEvent Global Monitor Callback handler.

  Description:
  This code is currently writen for mouse events.

  Returns: nothing
  */
  public handler NSEventGlobalMonitorCallback(in pBlock as BlockPointer, in pEvent as ObjcId) returns nothing
    variable tClickLoc as NSPoint
    variable tWindow as optional ObjcObject
    variable tX as String
    variable tY as String

    unsafe
      // TODO: The y coordinate is flipped and starts at bottom of screen.
      //       Need to flip it before sending to LCS.
      put ObjC_NSEventWindow(pEvent) into tWindow
      put ObjC_NSEventLocationInWindow(pEvent) into tClickLoc
      if tWindow is not nothing then
        // Window always seems to be NULL in this event
        log "need to convert"
      end if
    end unsafe

    format element 1 of tClickLoc as string into tX
    format element 2 of tClickLoc as string into tY

    post "NSEventGlobalMonitorCallback" with [tX & "," & tY]
  end handler


  /**
  Summary: Returns the list of available nsevent mask options.

  Description:
  See the following url for a description of the options:
  https://developer.apple.com/documentation/appkit/nseventtype?language=objc

  Returns: Comma-delimited list of options.
  */
  public handler NSEventTypeOptions() returns String
    variable tKeys as List
    variable tOptions as String

    put the keys of _GetEventTypeOptions() into tKeys
    sort tKeys in ascending text order
    combine tKeys with "," into tOptions
    return tOptions
  end handler


  /**
  Summary: Returns the event mask for an event type.

  Returns: Number
  */
  private handler _GetEventMask(in pEventMask as String) returns Number
    variable tEventTypes as Array

    put _GetEventTypeOptions() into tEventTypes

    return 1 shifted left by tEventTypes[pEventMask] bitwise
  end handler


  /**
  Description:
  https://developer.apple.com/documentation/appkit/nseventtype?language=objc
  */
  private handler _GetEventTypeOptions() returns Array
    return {"NSEventTypeLeftMouseDown": 1, \
            "NSEventTypeLeftMouseUp": 2, \
            "NSEventTypeRightMouseDown": 3, \
            "NSEventTypeRightMouseUp": 4, \
            "NSEventTypeMouseMoved": 5, \
            "NSEventTypeLeftMouseDragged": 6, \
            "NSEventTypeRightMouseDragged": 7, \
            "NSEventTypeMouseEntered": 8, \
            "NSEventTypeMouseExited": 9, \
            "NSEventTypeKeyDown": 10, \
            "NSEventTypeKeyUp": 11, \
            "NSEventTypeFlagsChanged": 12, \
            "NSEventTypeAppKitDefined": 13, \
            "NSEventTypeSystemDefined": 14, \
            "NSEventTypeApplicationDefined": 15, \
            "NSEventTypePeriodic": 16, \
            "NSEventTypeCursorUpdate": 17, \
            "NSEventTypeRotate": 18, \
            "NSEventTypeBeginGesture": 19, \
            "NSEventTypeEndGesture": 20, \
            "NSEventTypeScrollWheel": 22, \
            "NSEventTypeTabletPoint": 23, \
            "NSEventTypeTabletProximity": 24, \
            "NSEventTypeOtherMouseDown": 25, \
            "NSEventTypeOtherMouseUp": 26, \
            "NSEventTypeOtherMouseDragged": 27, \
            "NSEventTypeGesture": 29, \
            "NSEventTypeMagnify": 30, \
            "NSEventTypeSwipe": 31, \
            "NSEventTypeSmartMagnify": 32, \
            "NSEventTypeQuickLook": 33, \
            "NSEventTypePressure": 34, \
            "NSEventTypeDirectTouch": 37 \
            }
  end handler

end library
