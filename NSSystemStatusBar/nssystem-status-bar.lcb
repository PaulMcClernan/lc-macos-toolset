library com.livecode.extensions.devore.macstatusmenu	use com.livecode.foreign	use com.livecode.objc	metadata title is "Mac Status Menu"	metadata author is "Trevor DeVore"	metadata version is "0.1.0"	public foreign type NSRect binds to "MCAggregateTypeInfo:qqqq"	private foreign handler Objc_NSStatusBarSystemStatusBar() \				returns ObjcId binds to "objc:NSStatusBar.+systemStatusBar"	private foreign handler Objc_NSStatusBarStatusItemWithLength(in pStatusBar as ObjcId, in pLength as NaturalFloat) \				returns ObjcId binds to "objc:NSStatusBar.-statusItemWithLength:"	private foreign handler Objc_NSStatusBarThickness(in pStatusBar as ObjcId) \				returns CFloat binds to "objc:NSStatusBar.-thickness"	private foreign handler Objc_NSStatusBarVertical(in pStatusBar as ObjcId) \				returns CBool binds to "objc:NSStatusBar.-isVertical"	private foreign handler Objc_NSStatusItemSetTitle(in pObj as ObjcId, in pTitle as ObjcId) \				returns nothing binds to "objc:NSStatusItem.-setTitle:"	private foreign handler Objc_NSStatusItemSetMenu(in pObj as ObjcId, in pMenuObj as ObjcId) \				returns nothing binds to "objc:NSStatusItem.-setMenu:"	private foreign handler Objc_NSStatusItemSetHighlightMode(in pObj as ObjcId, in pBoolean as CBool) \				returns nothing binds to "objc:NSStatusItem.-setHighlightMode:" // For pre-10.10	private foreign handler Objc_NSStatusItemStatusBar(in pObj as ObjcId) \				returns ObjcId binds to "objc:NSStatusItem.-statusBar"	private foreign handler Objc_NSStatusItemButton(in pObj as ObjcId) \				returns ObjcId binds to "objc:NSStatusItem.-button"	private foreign handler Objc_NSStatusItemLength(in pObj as ObjcId) \				returns CFloat binds to "objc:NSStatusItem.-length"	private foreign handler Objc_NSStatusValueForKey(in pObj as ObjcId, in pKey as ObjcId) \				returns ObjcId binds to "objc:NSStatusItem.-valueForKey:"	private foreign handler Objc_NSWindowFrame(in pObj as ObjcId) \				returns NSRect binds to "objc:NSWindow.-frame"	private foreign handler Objc_NSButtonTitle(in pObj as ObjcId) \				returns ObjcId binds to "objc:NSButton.-title"	private foreign handler Objc_NSButtonSetTitle(in pObj as ObjcId, in pTitle as ObjcId) \				returns nothing binds to "objc:NSButton.-setTitle:"	private foreign handler Objc_NSButtonSetImage(in pObj as ObjcId, in pImage as ObjcId) \				returns nothing binds to "objc:NSButton.-setImage:"	private foreign handler Objc_NSButtonSetAlternateImage(in pObj as ObjcId, in pImage as ObjcId) \				returns nothing binds to "objc:NSButton.-setAlternateImage:"	private foreign handler Objc_NSImageAlloc() returns ObjcRetainedId binds to "objc:NSImage.+alloc"	private foreign handler Objc_NSImageInitWithContentsOfFile(in pObj as ObjcId, in pFilename as ObjcId) \				returns ObjcId binds to "objc:NSImage.-initWithContentsOfFile:"	private foreign handler Objc_NSImageSetTemplate(in pObj as ObjcId, in pBoolean as CBool) \				returns nothing binds to "objc:NSImage.-setTemplate:"	private foreign handler Objc_NSMenuAlloc() \				returns ObjcRetainedId binds to "objc:NSMenu.+alloc"	private foreign handler Objc_NSMenuInitWithTitle(in pObj as ObjcId, in pTitle as ObjcId) \				returns ObjcId binds to "objc:NSMenu.-initWithTitle:"	private foreign handler Objc_NSMenuAddItem(in pObj as ObjcId, in pItem as ObjcId) \				returns nothing binds to "objc:NSMenu.-addItem:"	private foreign handler Objc_NSMenuNumberOfItems(in pObj as ObjcId) \				returns CInt binds to "objc:NSMenu.-numberOfItems"	private foreign handler Objc_NSMenuItemAlloc() \				returns ObjcRetainedId binds to "objc:NSMenuItem.+alloc"	private foreign handler Objc_NSMenuItemInitWithTitle(in pObj as ObjcId, in pTitle as ObjcId, in pAction as optional ObjcId, in pKeyEquivalent as ObjcId) \				returns ObjcId binds to "objc:NSMenuItem.-initWithTitle:action:keyEquivalent:"	private foreign handler Objc_NSMenuItemSetTarget(in pObj as ObjcId, in pTargetObjId as ObjcId) \				returns nothing binds to "objc:NSMenuItem.-setTarget:"	private constant kNSVariableStatusItemLength is -1.0	private constant kNSSquareStatusItemLength is -2.0	private variable mStatusMenu as optional ObjcObject	private variable mMenuItem as ObjcObject	private variable mStatusItem as optional ObjcObject	private variable mStatusImage as ObjcObject	public handler TestMyMenu(in pImagePath as String) returns nothing		variable tStatusMenu as optional ObjcObject		variable tMenuItem as optional ObjcObject		variable tStatusBar as ObjcObject		variable tStatusImage as ObjcObject		variable tStatusBarButton as ObjcObject		unsafe			// Create an NSStatusItem			put Objc_NSStatusBarSystemStatusBar() into tStatusBar			log Objc_NSStatusBarThickness(tStatusBar)			put Objc_NSStatusBarStatusItemWithLength(tStatusBar, 80) into mStatusItem			variable tView as ObjcObject			variable tRect as NSRect			Objc_NSStatusItemSetTitle(mStatusItem, StringToNSString("What's up"))			// Set NSStatusItem's NSButton properties			put Objc_NSStatusItemButton(mStatusItem) into tStatusBarButton			log StringFromNSString(Objc_NSButtonTitle(tStatusBarButton))			Objc_NSButtonSetTitle(tStatusBarButton, StringToNSString("My Yoda Menu"))			-- log StringFromNSString(Objc_NSButtonTitle(tStatusBarButton))			-- log Objc_NSStatusItemLength(mStatusItem)			-- put Objc_NSStatusValueForKey(mStatusItem, StringToNSString("window")) into tView			-- put Objc_NSWindowFrame(tView) into tRect			// Create NSImage			put Objc_NSImageAlloc() into tStatusImage			put Objc_NSImageInitWithContentsOfFile(tStatusImage, StringToNSString(pImagePath)) into tStatusImage			Objc_NSImageSetTemplate(tStatusImage, true)			put tStatusImage into mStatusImage			Objc_NSButtonSetImage(tStatusBarButton, mStatusImage)			Objc_NSStatusItemSetHighlightMode(mStatusItem, true)			// Create status menu NSMenu			put Objc_NSMenuAlloc() into tStatusMenu			put Objc_NSMenuInitWithTitle(tStatusMenu, StringToNSString("LCB Menu")) into tStatusMenu			put tStatusMenu into mStatusMenu			// Create a menu item NSMenuItem			put Objc_NSMenuItemAlloc() into tMenuItem			put Objc_NSMenuItemInitWithTitle(tMenuItem, StringToNSString("Option 1"), nothing, StringToNSString("")) into tMenuItem			put tMenuItem into mMenuItem			Objc_NSMenuItemSetTarget(mMenuItem, mStatusMenu)			// Add NSMenuItem to NSMenu			Objc_NSMenuAddItem(mStatusMenu, mMenuItem)			// Assign NSMenu to NSStatusItem			Objc_NSStatusItemSetMenu(mStatusItem, mStatusMenu)			-- // Check if image data is being read in properly			-- -- log NSImageToImageDataAsType(tStatusImage, nothing)		end unsafe	end handler	public handler CleanupMyMenu() returns nothing	  put nothing into mStatusMenu	  put nothing into mStatusItem	end handler	public foreign type CGImageRef binds to "MCAggregateTypeInfo:r"	private foreign handler Objc_NSImageRepresentations(in pImage as ObjcId) \        returns ObjcId binds to "objc:NSImage.-representations"  private foreign handler Objc_NSImageRepGetCGImage(in pImageRep as ObjcId, in pContext as optional ObjcId, in pHints as optional ObjcId) \        returns CGImageRef binds to "objc:NSImageRep.-CGImageForProposedRect:context:hints:"  private foreign handler Objc_NSBitmapImageRepAlloc() \        returns ObjcRetainedId binds to "objc:NSBitmapImageRep.+alloc"  private foreign handler Objc_NSBitmapImageRepInitWithCGImage(in pImageRep as ObjcId, in pCGImageRef as CGImageRef) \        returns ObjcId binds to "objc:NSBitmapImageRep.-initWithCGImage:"  private foreign handler Objc_NSBitmapImageRepRepresenatationUsingType(in pBitmapImageRep as ObjcId, in pType as CInt, in pProps as optional ObjcId) \        returns ObjcId binds to "objc:NSBitmapImageRep.-representationUsingType:properties:"	private handler NSImageToImageDataAsType(in pNSImage as ObjcObject, in pImageType as optional Number) returns Data		variable tImageReps as ObjcObject		variable tImageRepsList as List		variable tImageRep as ObjcObject		variable tBitmapImageRep as ObjcObject		variable tCGImageRef as CGImageRef		variable tImageData as ObjcObject		// Default to PNG		if pImageType is nothing then			put 4 into pImageType		end if		unsafe		  put Objc_NSImageRepresentations(pNSImage) into tImageReps	    put ListFromNSArray(tImageReps) into tImageRepsList	    put element 1 of tImageRepsList into tImageRep	    put Objc_NSImageRepGetCGImage(tImageRep, nothing, nothing) into tCGImageRef	    put Objc_NSBitmapImageRepAlloc() into tBitmapImageRep	    put Objc_NSBitmapImageRepInitWithCGImage(tBitmapImageRep, tCGImageRef) into tBitmapImageRep	    -- TIFF = 0	    -- BMP = 1	    -- GIF = 2	    -- JPEG = 3	    -- PNG = 4	    -- JPEG2000 = 5	    put Objc_NSBitmapImageRepRepresenatationUsingType(tBitmapImageRep, pImageType, nothing) into tImageData		end unsafe    return DataFromNSData(tImageData)	end handlerend library