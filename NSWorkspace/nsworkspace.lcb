library community.livecode.trevordevore.nsworkspace	use com.livecode.foreign	use com.livecode.objc	metadata title is "NSWorkspace"	metadata author is "Trevor DeVore"	metadata version is "0.1.0"	private foreign handler ObjC_NSWorkspaceSharedWorkspace() returns ObjcId binds to "objc:NSWorkspace.+sharedWorkspace"	private foreign handler ObjC_NSWorkspaceSelectFile(in pSharedWorkspace as ObjcId, in pFilename as ObjcId, in pRootedAtPath as ObjcId) returns CBool binds to "objc:NSWorkspace.-selectFile:inFileViewerRootedAtPath:"  private foreign handler ObjC_NSWorkspaceRunningApplications(in pSharedWorkspace as ObjcId) returns ObjcId binds to "objc:NSWorkspace.-runningApplications"	private foreign handler ObjC_NSWorkspaceLaunchApplication(in pSharedWorkspace as ObjcId, in pAppName as ObjcId) returns CBool binds to "objc:NSWorkspace.launchApplication:"	private foreign handler ObjC_NSWorkspaceFrontmostApplication(in pSharedWorkspace as ObjcId) returns ObjcId binds to "objc:NSWorkspace.-frontmostApplication"  private foreign handler ObjC_NSRunningApplicationBundleIdentifier(in pObj as ObjcId) returns optional ObjcId binds to "objc:NSRunningApplication.-bundleIdentifier"  private foreign handler ObjC_NSRunningApplicationProcessIdentifier(in pObj as ObjcId) returns CInt binds to "objc:NSRunningApplication.-processIdentifier"	/**	Summary: Reveals a file or folder in the Finder.	Parameters:	pFilename: Path to the file or folder to reveal.	Returns: Boolean	*/	public handler NSWorkspaceSelectFile(in pFilename as String) returns Boolean		variable sharedWorkspace as ObjcObject		variable wasSuccessful as Boolean		unsafe			put ObjC_NSWorkspaceSharedWorkspace() into sharedWorkspace			put ObjC_NSWorkspaceSelectFile(sharedWorkspace, StringToNSString(pFilename), StringToNSString("")) into wasSuccessful		end unsafe		return wasSuccessful	end handler  /**  Summary: Returns boolean value representing running state of an application.  Parameters:  pBundleId: The bundle identifier that uniquely identifies the application.  Returns: Boolean  */  public handler NSWorkspaceIsAppRunning(in pBundleId as String) returns Boolean    variable workSpace as ObjcObject    variable tRunningAppsObjc as optional ObjcObject    variable tRunningApps as List    variable tRunningApp as ObjcObject    variable tBundleId as optional ObjcObject    unsafe      put ObjC_NSWorkspaceSharedWorkspace() into workSpace      put ObjC_NSWorkspaceRunningApplications(workSpace) into tRunningAppsObjc    end unsafe    if tRunningAppsObjc is not nothing then      put ListFromNSArray(tRunningAppsObjc) into tRunningApps      repeat for each element tRunningApp in tRunningApps        unsafe          put ObjC_NSRunningApplicationBundleIdentifier(tRunningApp) into tBundleId        end unsafe        if tBundleId is not nothing then          log StringFromNSString(tBundleId)          if StringFromNSString(tBundleId) is pBundleId then            return true          end if        end if      end repeat    end if    return false  end handler	/**	Summary: Launchs the specified application.	Parameters:	pAppName: Name of the application to open.	Description:	pAppName does not need to be the full path. For example, "LiveCode Business 9.0.0.app" would work if	"LiveCode Business 9.0.0.app" was installed in `/Applications`.	Returns: Boolean	*/	public handler NSWorkspaceLaunchApplication(in pAppName as String) returns Boolean		variable sharedWorkspace as ObjcObject		variable wasSuccessful as Boolean		unsafe			put ObjC_NSWorkspaceSharedWorkspace() into sharedWorkspace			put ObjC_NSWorkspaceLaunchApplication(sharedWorkspace, StringToNSString(pAppName)) into wasSuccessful		end unsafe		return wasSuccessful	end handler  /**  Summary: Returns the process identifier (pid) of the frontmost application.  Returns: Integer  */	public handler NSWorkspaceGetFrontmostApplication() returns Integer		variable sharedWorkspace as ObjcObject		variable runningApplication as optional ObjcObject    variable tPid as Integer		unsafe			put ObjC_NSWorkspaceSharedWorkspace() into sharedWorkspace			put ObjC_NSWorkspaceFrontmostApplication(sharedWorkspace) into runningApplication      if runningApplication is not nothing then        put ObjC_NSRunningApplicationProcessIdentifier(runningApplication) into tPid      end if		end unsafe    return tPid  end handlerend library