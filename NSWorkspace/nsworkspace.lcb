library com.livecode.extensions.devore.mactools	use com.livecode.foreign	use com.livecode.objc	metadata title is "NSWorkspace"	metadata author is "Trevor DeVore"	metadata version is "0.1.0"	/*	Pointer	CBool maps to 'bool'	CChar, CSChar and CUChar map to 'char', 'signed char' and 'unsigned char'	CShort/CSShort and CUShort map to 'signed short' and 'unsigned short'	CInt/CSInt and CUInt map to 'signed int' and 'unsigned int'	CLong/CSLong and CULong map to 'signed long' and 'unsigned long'	CLongLong/CSLongLong and CULongLong map to 'signed long long' and 'unsigned long long'	CFloat maps to 'float'	CDouble maps to 'double'	ZStringNative	ObjcId	ObjcRetainedId	ObjcAutoreleasedId	*/	private foreign handler NSWorkspaceSharedWorkspace() returns ObjcId binds to "objc:NSWorkspace.+sharedWorkspace"	private foreign handler NSWorkspaceSelectFile(in pSharedWorkspace as ObjcId, in pFilename as ObjcId, in pRootedAtPath as ObjcId) returns CBool binds to "objc:NSWorkspace.-selectFile:inFileViewerRootedAtPath:"	private foreign handler NSWorkspaceLaunchApplication(in pSharedWorkspace as ObjcId, in pAppName as ObjcId) returns CBool binds to "objc:NSWorkspace.launchApplication:"	/**	Summary: Reveals a file or folder in the Finder.	Parameters:	pFilename: Path to the file or folder to reveal.	Returns: Boolean	*/	public handler mactoolsRevealPath(in pFilename as String)		variable sharedWorkspace as ObjcObject		variable wasSuccessful as Boolean		unsafe			put NSWorkspaceSharedWorkspace() into sharedWorkspace			put NSWorkspaceSelectFile(sharedWorkspace, StringToNSString(pFilename), StringToNSString("")) into wasSuccessful		end unsafe		return wasSuccessful	end handler	/**	Summary: Launchs the specified application.	Parameters:	pAppName: Name of the application to open.	Description:	pAppName does not need to be the full path. For example, "LiveCode Business 9.0.0.app" would work if	"LiveCode Business 9.0.0.app" was installed in `/Applications`.	Returns: Boolean	*/	public handler mactoolsLaunchApplication(in pAppName as String)		variable sharedWorkspace as ObjcObject		variable wasSuccessful as Boolean		unsafe			put NSWorkspaceSharedWorkspace() into sharedWorkspace			put NSWorkspaceLaunchApplication(sharedWorkspace, StringToNSString(pAppName)) into wasSuccessful		end unsafe		return wasSuccessful	end handler	public handler NSWorkspaceGetFrontmostApplication    /*      NSString *t_error = nil;      pid_t t_psn;      if (t_error == nil) {            NSRunningApplication * t_app = nil;            t_app = [[NSWorkspace sharedWorkspace] frontmostApplication];            if (t_app != nil)                t_psn = [t_app processIdentifier];            else                t_error = @"unable to get current process";      }      if (t_error == nil)      {        return [NSString stringWithFormat:@"%d", t_psn];      }      else      {        // Return error message as string            return t_error;        }    */  end handler	private foreign handler NSSystemStatusBar() returns ObjcId binds to "objc:NSStatusBar.+systemStatusBar"	private foreign handler NSStatusItemCreate(in pStatusBar as ObjcId, in pLength as CFloat) returns ObjcId binds to "objc:NSStatusBar.-statusItemWithLength:"	private foreign handler NSStatusItemButton(in pObj as ObjcId) returns ObjcId binds to "objc:NSStatusItem.button"	private foreign handler NSStatusItemSetTitle(in pObj as ObjcId, in pTitle as ObjcId) returns nothing binds to "objc:NSStatusItem.-setTitle:"	private foreign handler NSStatusItemSetHighlightMode(in pObj as ObjcId, in pBool as CBool) returns nothing binds to "objc:NSStatusItem.-setHighlightMode:"	private foreign handler NSStatusItemSetMenu(in pObj as ObjcId, in pMenuObj as ObjcId) returns nothing binds to "objc:NSStatusItem.-setMenu:"	private foreign handler NSStatusBarButtonSetTitle(in pObj as ObjcId, in pTitle as ObjcId) returns nothing binds to "objc:NSStatusBarButton.-setTitle:"	private foreign handler NSStatusBarButtonSetImage(in pObj as ObjcId, in pImage as ObjcId) returns nothing binds to "objc:NSStatusBarButton.-setImage:"	private foreign handler NSImageAlloc() returns ObjcRetainedId binds to "objc:NSImage.+alloc"	private foreign handler NSImageCreateFromFile(in pObj as ObjcId, in pFilename as ObjcId) returns ObjcId binds to "objc:NSImage.-initByReferencingFile:"	private foreign handler NSMenuAlloc() returns ObjcRetainedId binds to "objc:NSMenu.+alloc"	private foreign handler NSMenuCreate(in pObj as ObjcId, pTitle as ObjcId) returns ObjcId binds to "objc:NSMenu.-initWithTitle:"	private foreign handler NSMenuAddItem(in pObj as ObjcId, pItem as ObjcId) returns nothing binds to "objc:NSMenu.-addItem:"	private foreign handler NSMenuNumberOfItems(in pObj as ObjcId) returns CInt binds to "objc:NSMenu.-numberOfItems"	private foreign handler NSMenuItemAlloc() returns ObjcRetainedId binds to "objc:NSMenuItem.+alloc"	private foreign handler NSMenuItemCreate(in pObj as ObjcId, pTitle as ObjcId, pAction as optional ObjcId, pKeyEquivalent as ObjcId) returns ObjcId binds to "objc:NSMenuItem.-initWithTitle:action:keyEquivalent:"	public handler TestMyMenu(in pImagePath as String)		unsafe			// Menu			variable tMenu as ObjcObject			put NSMenuAlloc() into tMenu			put NSMenuCreate(tMenu, StringToNSString("My Menu")) into tMenu			// Menu Item			variable tMenuItem as ObjcObject			put NSMenuItemAlloc() into tMenuItem			put NSMenuItemCreate(tMenuItem, StringToNSString("Option 1"), nothing, StringToNSString("")) into tMenuItem			NSMenuAddItem(tMenu, tMenuItem)			variable tCount as Integer			put NSMenuNumberOfItems(tMenu) into tCount			log tCount			// Status Bar			variable statusBar as ObjcObject			variable tItem as ObjcObject			put NSSystemStatusBar() into statusBar			put NSStatusItemCreate(statusBar, -2) into tItem			NSStatusItemSetTitle(tItem, StringToNSString("Testing"))			NSStatusItemSetHighlightMode(tItem, true)			NSStatusItemSetMenu(tItem, tMenu)			variable tImage as ObjcObject			put NSImageAlloc() into tImage			put NSImageCreateFromFile(tImage, StringToNSString(pImagePath)) into tImage			// Status Item			variable tStatusItemButton as ObjcObject			put NSStatusItemButton(tItem) into tStatusItemButton			NSStatusBarButtonSetImage(tStatusItemButton, tImage)			NSStatusBarButtonSetTitle(tStatusItemButton, StringToNSString("My Button!"))		end unsafe	end handlerend library